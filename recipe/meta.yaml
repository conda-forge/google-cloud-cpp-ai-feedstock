{% set version = "2.22.0" %}

package:
  name: google-cloud-cpp-ai
  version: {{ version }}

source:
  url: https://github.com/googleapis/google-cloud-cpp/archive/v{{ version }}.tar.gz
  sha256: 0c68782e57959c82e0c81def805c01460a042c1aae0c2feee905acaa2a2dc9bf

build:
  number: 1
requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - cmake
    - ninja
    - libgrpc
    - libprotobuf
    - zlib # Needed by gRPC
  host:
    - libgoogle-cloud-devel =={{ version }}
    - libabseil
    - libcurl
    - libgrpc
    - libprotobuf
    - openssl
    - nlohmann_json
    - zlib # Needed by gRPC

outputs:
  - name: libgoogle-cloud-aiplatform
    script: install-libgoogle-cloud.sh  # [unix]
    script: install-libgoogle-cloud.bat  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        - libgoogle-cloud-devel =={{ version }}
        - libabseil
        - libprotobuf
        - libgrpc
    test:
      commands:
        # presence of shared library (unix)
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_aiplatform.{{ version }}.dylib  # [osx]
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_aiplatform.so.{{ version }}  # [linux]

        # absence of static library (windows). It belongs only in devel package.
        - if exist %LIBRARY_LIB%\google_cloud_cpp_aiplatform.lib exit 1  # [win]

        # absence of headers (they belong in devel package).
        - test ! -f $PREFIX/include/google/cloud/version.h  # [unix]
        - if exist %LIBRARY_INC%\include\google\cloud\version.h exit 1  # [win]

        # absence of metadata for CMake & pkgconfig (belongs in the devel package).
        - test ! -f $PREFIX/lib/pkgconfig/google_cloud_cpp_aiplatform.pc  # [unix]
        - test ! -f $PREFIX/lib/cmake/google_cloud_cpp_aiplatform/google_cloud_cpp_aiplatform-config.cmake  # [unix]
        - if exist %LIBRARY_PREFIX%\lib\cmake\google_cloud_cpp_aiplatform\google_cloud_cpp_aiplatform-config.cmake exit 1  # [win]

  - name: libgoogle-cloud-aiplatform-devel
    script: install-libgoogle-cloud.sh  # [unix]
    script: install-libgoogle-cloud.bat  # [win]
    build:
      run_exports:
        - {{ pin_subpackage("libgoogle-cloud-aiplatform", max_pin="x.x") }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        - libgoogle-cloud-devel =={{ version }}
      run:
        - {{ pin_subpackage("libgoogle-cloud-aiplatform", exact=True) }}
    test:
      commands:
        # build an example.
        - ./run_test_feature.sh   # [unix]
        - ./run_test_feature.bat  # [win]
      requires:
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - libgoogle-cloud-devel =={{ version }}
      files:
        - run_test_feature.sh
        - run_test_feature.bat
      source_files:
        - google/cloud/aiplatform/quickstart/*.cc
        - google/cloud/aiplatform/quickstart/CMakeLists.txt

  - name: libgoogle-cloud-automl
    script: install-libgoogle-cloud.sh  # [unix]
    script: install-libgoogle-cloud.bat  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        - libgoogle-cloud-devel =={{ version }}
        - libabseil
        - libprotobuf
        - libgrpc
    test:
      commands:
        # presence of shared library (unix)
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_automl.{{ version }}.dylib  # [osx]
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_automl.so.{{ version }}  # [linux]

        # absence of static library (windows). It belongs only in devel package.
        - if exist %LIBRARY_LIB%\google_cloud_cpp_automl.lib exit 1  # [win]

        # absence of headers (they belong in devel package).
        - test ! -f $PREFIX/include/google/cloud/version.h  # [unix]
        - if exist %LIBRARY_INC%\include\google\cloud\version.h exit 1  # [win]

        # absence of metadata for CMake & pkgconfig (belongs in the devel package).
        - test ! -f $PREFIX/lib/pkgconfig/google_cloud_cpp_automl.pc  # [unix]
        - test ! -f $PREFIX/lib/cmake/google_cloud_cpp_automl/google_cloud_cpp_automl-config.cmake  # [unix]
        - if exist %LIBRARY_PREFIX%\lib\cmake\google_cloud_cpp_automl\google_cloud_cpp_automl-config.cmake exit 1  # [win]

  - name: libgoogle-cloud-automl-devel
    script: install-libgoogle-cloud.sh  # [unix]
    script: install-libgoogle-cloud.bat  # [win]
    build:
      run_exports:
        - {{ pin_subpackage("libgoogle-cloud-automl", max_pin="x.x") }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        - libgoogle-cloud-devel =={{ version }}
      run:
        - {{ pin_subpackage("libgoogle-cloud-automl", exact=True) }}
    test:
      commands:
        # build an example.
        - ./run_test_feature.sh   # [unix]
        - ./run_test_feature.bat  # [win]
      requires:
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - libgoogle-cloud-devel =={{ version }}
      files:
        - run_test_feature.sh
        - run_test_feature.bat
      source_files:
        - google/cloud/automl/quickstart/*.cc
        - google/cloud/automl/quickstart/CMakeLists.txt

  - name: libgoogle-cloud-contentwarehouse
    script: install-libgoogle-cloud.sh  # [unix]
    script: install-libgoogle-cloud.bat  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        - libgoogle-cloud-devel =={{ version }}
        - libabseil
        - libprotobuf
        - libgrpc
    test:
      commands:
        # presence of shared library (unix)
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_contentwarehouse.{{ version }}.dylib  # [osx]
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_contentwarehouse.so.{{ version }}  # [linux]

        # absence of static library (windows). It belongs only in devel package.
        - if exist %LIBRARY_LIB%\google_cloud_cpp_contentwarehouse.lib exit 1  # [win]

        # absence of headers (they belong in devel package).
        - test ! -f $PREFIX/include/google/cloud/version.h  # [unix]
        - if exist %LIBRARY_INC%\include\google\cloud\version.h exit 1  # [win]

        # absence of metadata for CMake & pkgconfig (belongs in the devel package).
        - test ! -f $PREFIX/lib/pkgconfig/google_cloud_cpp_contentwarehouse.pc  # [unix]
        - test ! -f $PREFIX/lib/cmake/google_cloud_cpp_contentwarehouse/google_cloud_cpp_contentwarehouse-config.cmake  # [unix]
        - if exist %LIBRARY_PREFIX%\lib\cmake\google_cloud_cpp_contentwarehouse\google_cloud_cpp_contentwarehouse-config.cmake exit 1  # [win]

  - name: libgoogle-cloud-contentwarehouse-devel
    script: install-libgoogle-cloud.sh  # [unix]
    script: install-libgoogle-cloud.bat  # [win]
    build:
      run_exports:
        - {{ pin_subpackage("libgoogle-cloud-contentwarehouse", max_pin="x.x") }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        - libgoogle-cloud-devel =={{ version }}
      run:
        - {{ pin_subpackage("libgoogle-cloud-contentwarehouse", exact=True) }}
    test:
      commands:
        # build an example.
        - ./run_test_feature.sh   # [unix]
        - ./run_test_feature.bat  # [win]
      requires:
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - libgoogle-cloud-devel =={{ version }}
      files:
        - run_test_feature.sh
        - run_test_feature.bat
      source_files:
        - google/cloud/contentwarehouse/quickstart/*.cc
        - google/cloud/contentwarehouse/quickstart/CMakeLists.txt

  - name: libgoogle-cloud-discoveryengine
    script: install-libgoogle-cloud.sh  # [unix]
    script: install-libgoogle-cloud.bat  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        - libgoogle-cloud-devel =={{ version }}
        - libabseil
        - libprotobuf
        - libgrpc
    test:
      commands:
        # presence of shared library (unix)
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_discoveryengine.{{ version }}.dylib  # [osx]
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_discoveryengine.so.{{ version }}  # [linux]

        # absence of static library (windows). It belongs only in devel package.
        - if exist %LIBRARY_LIB%\google_cloud_cpp_discoveryengine.lib exit 1  # [win]

        # absence of headers (they belong in devel package).
        - test ! -f $PREFIX/include/google/cloud/version.h  # [unix]
        - if exist %LIBRARY_INC%\include\google\cloud\version.h exit 1  # [win]

        # absence of metadata for CMake & pkgconfig (belongs in the devel package).
        - test ! -f $PREFIX/lib/pkgconfig/google_cloud_cpp_discoveryengine.pc  # [unix]
        - test ! -f $PREFIX/lib/cmake/google_cloud_cpp_discoveryengine/google_cloud_cpp_discoveryengine-config.cmake  # [unix]
        - if exist %LIBRARY_PREFIX%\lib\cmake\google_cloud_cpp_discoveryengine\google_cloud_cpp_discoveryengine-config.cmake exit 1  # [win]

  - name: libgoogle-cloud-discoveryengine-devel
    script: install-libgoogle-cloud.sh  # [unix]
    script: install-libgoogle-cloud.bat  # [win]
    build:
      run_exports:
        - {{ pin_subpackage("libgoogle-cloud-discoveryengine", max_pin="x.x") }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        - libgoogle-cloud-devel =={{ version }}
      run:
        - {{ pin_subpackage("libgoogle-cloud-discoveryengine", exact=True) }}
    test:
      commands:
        # build an example.
        - ./run_test_feature.sh   # [unix]
        - ./run_test_feature.bat  # [win]
      requires:
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - libgoogle-cloud-devel =={{ version }}
      files:
        - run_test_feature.sh
        - run_test_feature.bat
      source_files:
        - google/cloud/discoveryengine/quickstart/*.cc
        - google/cloud/discoveryengine/quickstart/CMakeLists.txt

  - name: libgoogle-cloud-dialogflow_es
    script: install-libgoogle-cloud.sh  # [unix]
    script: install-libgoogle-cloud.bat  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - libgoogle-cloud-devel =={{ version }}
      host:
        - libgoogle-cloud-devel =={{ version }}
        - libabseil
        - libprotobuf
        - libgrpc
    test:
      commands:
        # presence of shared library (unix)
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_dialogflow_es.{{ version }}.dylib  # [osx]
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_dialogflow_es.so.{{ version }}  # [linux]

        # absence of static library (windows). It belongs only in devel package.
        - if exist %LIBRARY_LIB%\google_cloud_cpp_dialogflow_es.lib exit 1  # [win]

        # absence of headers (they belong in devel package).
        - test ! -f $PREFIX/include/google/cloud/version.h  # [unix]
        - if exist %LIBRARY_INC%\include\google\cloud\version.h exit 1  # [win]

        # absence of metadata for CMake & pkgconfig (belongs in the devel package).
        - test ! -f $PREFIX/lib/pkgconfig/google_cloud_cpp_dialogflow_es.pc  # [unix]
        - test ! -f $PREFIX/lib/cmake/google_cloud_cpp_dialogflow_es/google_cloud_cpp_dialogflow_es-config.cmake  # [unix]
        - if exist %LIBRARY_PREFIX%\lib\cmake\google_cloud_cpp_dialogflow_es\google_cloud_cpp_dialogflow_es-config.cmake exit 1  # [win]

  - name: libgoogle-cloud-dialogflow_es-devel
    script: install-libgoogle-cloud.sh  # [unix]
    script: install-libgoogle-cloud.bat  # [win]
    build:
      run_exports:
        - {{ pin_subpackage("libgoogle-cloud-dialogflow_es", max_pin="x.x") }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        - libgoogle-cloud-devel =={{ version }}
      run:
        - {{ pin_subpackage("libgoogle-cloud-dialogflow_es", exact=True) }}
    test:
      commands:
        # build an example.
        - ./run_test_feature.sh   # [unix]
        - ./run_test_feature.bat  # [win]
      requires:
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - libgoogle-cloud-devel =={{ version }}
      files:
        - run_test_feature.sh
        - run_test_feature.bat
      source_files:
        - google/cloud/dialogflow_es/quickstart/*.cc
        - google/cloud/dialogflow_es/quickstart/CMakeLists.txt

  - name: libgoogle-cloud-dialogflow_cx
    script: install-libgoogle-cloud.sh  # [unix]
    script: install-libgoogle-cloud.bat  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        - libgoogle-cloud-devel =={{ version }}
        - libabseil
        - libprotobuf
        - libgrpc
    test:
      commands:
        # presence of shared library (unix)
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_dialogflow_cx.{{ version }}.dylib  # [osx]
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_dialogflow_cx.so.{{ version }}  # [linux]

        # absence of static library (windows). It belongs only in devel package.
        - if exist %LIBRARY_LIB%\google_cloud_cpp_dialogflow_cx.lib exit 1  # [win]

        # absence of headers (they belong in devel package).
        - test ! -f $PREFIX/include/google/cloud/version.h  # [unix]
        - if exist %LIBRARY_INC%\include\google\cloud\version.h exit 1  # [win]

        # absence of metadata for CMake & pkgconfig (belongs in the devel package).
        - test ! -f $PREFIX/lib/pkgconfig/google_cloud_cpp_dialogflow_cx.pc  # [unix]
        - test ! -f $PREFIX/lib/cmake/google_cloud_cpp_dialogflow_cx/google_cloud_cpp_dialogflow_cx-config.cmake  # [unix]
        - if exist %LIBRARY_PREFIX%\lib\cmake\google_cloud_cpp_dialogflow_cx\google_cloud_cpp_dialogflow_cx-config.cmake exit 1  # [win]

  - name: libgoogle-cloud-dialogflow_cx-devel
    script: install-libgoogle-cloud.sh  # [unix]
    script: install-libgoogle-cloud.bat  # [win]
    build:
      run_exports:
        - {{ pin_subpackage("libgoogle-cloud-dialogflow_cx", max_pin="x.x") }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        - libgoogle-cloud-devel =={{ version }}
      run:
        - {{ pin_subpackage("libgoogle-cloud-dialogflow_cx", exact=True) }}
    test:
      commands:
        # build an example.
        - ./run_test_feature.sh   # [unix]
        - ./run_test_feature.bat  # [win]
      requires:
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - libgoogle-cloud-devel =={{ version }}
      files:
        - run_test_feature.sh
        - run_test_feature.bat
      source_files:
        - google/cloud/dialogflow_cx/quickstart/*.cc
        - google/cloud/dialogflow_cx/quickstart/CMakeLists.txt

  - name: libgoogle-cloud-dlp
    script: install-libgoogle-cloud.sh  # [unix]
    script: install-libgoogle-cloud.bat  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        - libgoogle-cloud-devel =={{ version }}
        - libabseil
        - libprotobuf
        - libgrpc
    test:
      commands:
        # presence of shared library (unix)
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_dlp.{{ version }}.dylib  # [osx]
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_dlp.so.{{ version }}  # [linux]

        # absence of static library (windows). It belongs only in devel package.
        - if exist %LIBRARY_LIB%\google_cloud_cpp_dlp.lib exit 1  # [win]

        # absence of headers (they belong in devel package).
        - test ! -f $PREFIX/include/google/cloud/version.h  # [unix]
        - if exist %LIBRARY_INC%\include\google\cloud\version.h exit 1  # [win]

        # absence of metadata for CMake & pkgconfig (belongs in the devel package).
        - test ! -f $PREFIX/lib/pkgconfig/google_cloud_cpp_dlp.pc  # [unix]
        - test ! -f $PREFIX/lib/cmake/google_cloud_cpp_dlp/google_cloud_cpp_dlp-config.cmake  # [unix]
        - if exist %LIBRARY_PREFIX%\lib\cmake\google_cloud_cpp_dlp\google_cloud_cpp_dlp-config.cmake exit 1  # [win]

  - name: libgoogle-cloud-dlp-devel
    script: install-libgoogle-cloud.sh  # [unix]
    script: install-libgoogle-cloud.bat  # [win]
    build:
      run_exports:
        - {{ pin_subpackage("libgoogle-cloud-dlp", max_pin="x.x") }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        - libgoogle-cloud-devel =={{ version }}
      run:
        - {{ pin_subpackage("libgoogle-cloud-dlp", exact=True) }}
    test:
      commands:
        # build an example.
        - ./run_test_feature.sh   # [unix]
        - ./run_test_feature.bat  # [win]
      requires:
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - libgoogle-cloud-devel =={{ version }}
      files:
        - run_test_feature.sh
        - run_test_feature.bat
      source_files:
        - google/cloud/dlp/quickstart/*.cc
        - google/cloud/dlp/quickstart/CMakeLists.txt

  - name: libgoogle-cloud-documentai
    script: install-libgoogle-cloud.sh  # [unix]
    script: install-libgoogle-cloud.bat  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        # This is slightly different from the other subpackages.
        # `contentwarehouse` automatically builds installs `documentai` too.
        - {{ pin_subpackage("libgoogle-cloud-contentwarehouse", exact=True) }}
        - libgoogle-cloud-devel =={{ version }}
      run:
        - {{ pin_subpackage("libgoogle-cloud-contentwarehouse", exact=True) }}
        - libgoogle-cloud =={{ version }}
    test:
      commands:
        # presence of shared library (unix)
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_documentai.{{ version }}.dylib  # [osx]
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_documentai.so.{{ version }}  # [linux]

        # absence of static library (windows). It belongs only in devel package.
        - if exist %LIBRARY_LIB%\google_cloud_cpp_documentai.lib exit 1  # [win]

        # absence of headers (they belong in devel package).
        - test ! -f $PREFIX/include/google/cloud/version.h  # [unix]
        - if exist %LIBRARY_INC%\include\google\cloud\version.h exit 1  # [win]

        # absence of metadata for CMake & pkgconfig (belongs in the devel package).
        - test ! -f $PREFIX/lib/pkgconfig/google_cloud_cpp_documentai.pc  # [unix]
        - test ! -f $PREFIX/lib/cmake/google_cloud_cpp_documentai/google_cloud_cpp_documentai-config.cmake  # [unix]
        - if exist %LIBRARY_PREFIX%\lib\cmake\google_cloud_cpp_documentai\google_cloud_cpp_documentai-config.cmake exit 1  # [win]

  - name: libgoogle-cloud-documentai-devel
    # This is slightly different from the other subpackages. `contentwarehouse`
    # automatically builds installs `documentai` too.
    script: install-libgoogle-cloud.sh  # [unix]
    script: install-libgoogle-cloud.bat  # [win]
    build:
      run_exports:
        - {{ pin_subpackage("libgoogle-cloud-documentai", max_pin="x.x") }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        - {{ pin_subpackage("libgoogle-cloud-contentwarehouse-devel", exact=True) }}
        - libgoogle-cloud-devel =={{ version }}
      run:
        - {{ pin_subpackage("libgoogle-cloud-contentwarehouse-devel", exact=True) }}
        - libgoogle-cloud-devel =={{ version }}
    test:
      commands:
        # build an example.
        - ./run_test_feature.sh   # [unix]
        - ./run_test_feature.bat  # [win]
      requires:
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - libgoogle-cloud-devel =={{ version }}
      files:
        - run_test_feature.sh
        - run_test_feature.bat
      source_files:
        - google/cloud/documentai/quickstart/*.cc
        - google/cloud/documentai/quickstart/CMakeLists.txt

  - name: libgoogle-cloud-retail
    script: install-libgoogle-cloud.sh  # [unix]
    script: install-libgoogle-cloud.bat  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        - libgoogle-cloud-devel =={{ version }}
        - libabseil
        - libprotobuf
        - libgrpc
    test:
      commands:
        # presence of shared library (unix)
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_retail.{{ version }}.dylib  # [osx]
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_retail.so.{{ version }}  # [linux]

        # absence of static library (windows). It belongs only in devel package.
        - if exist %LIBRARY_LIB%\google_cloud_cpp_retail.lib exit 1  # [win]

        # absence of headers (they belong in devel package).
        - test ! -f $PREFIX/include/google/cloud/version.h  # [unix]
        - if exist %LIBRARY_INC%\include\google\cloud\version.h exit 1  # [win]

        # absence of metadata for CMake & pkgconfig (belongs in the devel package).
        - test ! -f $PREFIX/lib/pkgconfig/google_cloud_cpp_retail.pc  # [unix]
        - test ! -f $PREFIX/lib/cmake/google_cloud_cpp_retail/google_cloud_cpp_retail-config.cmake  # [unix]
        - if exist %LIBRARY_PREFIX%\lib\cmake\google_cloud_cpp_retail\google_cloud_cpp_retail-config.cmake exit 1  # [win]

  - name: libgoogle-cloud-retail-devel
    script: install-libgoogle-cloud.sh  # [unix]
    script: install-libgoogle-cloud.bat  # [win]
    build:
      run_exports:
        - {{ pin_subpackage("libgoogle-cloud-retail", max_pin="x.x") }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        - libgoogle-cloud-devel =={{ version }}
      run:
        - {{ pin_subpackage("libgoogle-cloud-retail", exact=True) }}
    test:
      commands:
        # build an example.
        - ./run_test_feature.sh   # [unix]
        - ./run_test_feature.bat  # [win]
      requires:
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - libgoogle-cloud-devel =={{ version }}
      files:
        - run_test_feature.sh
        - run_test_feature.bat
      source_files:
        - google/cloud/retail/quickstart/*.cc
        - google/cloud/retail/quickstart/CMakeLists.txt

  - name: libgoogle-cloud-speech
    script: install-libgoogle-cloud.sh  # [unix]
    script: install-libgoogle-cloud.bat  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        - libgoogle-cloud-devel =={{ version }}
        - libabseil
        - libprotobuf
        - libgrpc
    test:
      commands:
        # presence of shared library (unix)
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_speech.{{ version }}.dylib  # [osx]
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_speech.so.{{ version }}  # [linux]

        # absence of static library (windows). It belongs only in devel package.
        - if exist %LIBRARY_LIB%\google_cloud_cpp_speech.lib exit 1  # [win]

        # absence of headers (they belong in devel package).
        - test ! -f $PREFIX/include/google/cloud/version.h  # [unix]
        - if exist %LIBRARY_INC%\include\google\cloud\version.h exit 1  # [win]

        # absence of metadata for CMake & pkgconfig (belongs in the devel package).
        - test ! -f $PREFIX/lib/pkgconfig/google_cloud_cpp_speech.pc  # [unix]
        - test ! -f $PREFIX/lib/cmake/google_cloud_cpp_speech/google_cloud_cpp_speech-config.cmake  # [unix]
        - if exist %LIBRARY_PREFIX%\lib\cmake\google_cloud_cpp_speech\google_cloud_cpp_speech-config.cmake exit 1  # [win]

  - name: libgoogle-cloud-speech-devel
    script: install-libgoogle-cloud.sh  # [unix]
    script: install-libgoogle-cloud.bat  # [win]
    build:
      run_exports:
        - {{ pin_subpackage("libgoogle-cloud-speech", max_pin="x.x") }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        - libgoogle-cloud-devel =={{ version }}
      run:
        - {{ pin_subpackage("libgoogle-cloud-speech", exact=True) }}
    test:
      commands:
        # build an example.
        - ./run_test_feature.sh   # [unix]
        - ./run_test_feature.bat  # [win]
      requires:
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - libgoogle-cloud-devel =={{ version }}
      files:
        - run_test_feature.sh
        - run_test_feature.bat
      source_files:
        - google/cloud/speech/quickstart/*.cc
        - google/cloud/speech/quickstart/CMakeLists.txt

  - name: libgoogle-cloud-talent
    script: install-libgoogle-cloud.sh  # [unix]
    script: install-libgoogle-cloud.bat  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        - libgoogle-cloud-devel =={{ version }}
        - libabseil
        - libprotobuf
        - libgrpc
    test:
      commands:
        # presence of shared library (unix)
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_talent.{{ version }}.dylib  # [osx]
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_talent.so.{{ version }}  # [linux]

        # absence of static library (windows). It belongs only in devel package.
        - if exist %LIBRARY_LIB%\google_cloud_cpp_talent.lib exit 1  # [win]

        # absence of headers (they belong in devel package).
        - test ! -f $PREFIX/include/google/cloud/version.h  # [unix]
        - if exist %LIBRARY_INC%\include\google\cloud\version.h exit 1  # [win]

        # absence of metadata for CMake & pkgconfig (belongs in the devel package).
        - test ! -f $PREFIX/lib/pkgconfig/google_cloud_cpp_talent.pc  # [unix]
        - test ! -f $PREFIX/lib/cmake/google_cloud_cpp_talent/google_cloud_cpp_talent-config.cmake  # [unix]
        - if exist %LIBRARY_PREFIX%\lib\cmake\google_cloud_cpp_talent\google_cloud_cpp_talent-config.cmake exit 1  # [win]

  - name: libgoogle-cloud-talent-devel
    script: install-libgoogle-cloud.sh  # [unix]
    script: install-libgoogle-cloud.bat  # [win]
    build:
      run_exports:
        - {{ pin_subpackage("libgoogle-cloud-talent", max_pin="x.x") }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        - libgoogle-cloud-devel =={{ version }}
      run:
        - {{ pin_subpackage("libgoogle-cloud-talent", exact=True) }}
    test:
      commands:
        # build an example.
        - ./run_test_feature.sh   # [unix]
        - ./run_test_feature.bat  # [win]
      requires:
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - libgoogle-cloud-devel =={{ version }}
      files:
        - run_test_feature.sh
        - run_test_feature.bat
      source_files:
        - google/cloud/talent/quickstart/*.cc
        - google/cloud/talent/quickstart/CMakeLists.txt

about:
  home: https://github.com/googleapis/google-cloud-cpp
  license: Apache-2.0
  license_family: Apache
  license_file: LICENSE
  summary: Google Cloud Client Library for C++

extra:
  feedstock-name: google-cloud-cpp-ai
  recipe-maintainers:
    - coryan
    - conda-forge/google-cloud-cpp
